Строки. Внутреннее устройство строк в Go.
    Базовый тип, представляет собой последовательность байтов, но обладающий специальными методами для работы с ними
    Особенность - строки в Golang не изменются, каждый раз, когда мы делаем конкатенацию - то мы создаем новую строку, а это затратно
    Почему не изменяются? Потому что Go использует кодировку UTF-8, символы представлены разным количеством байт. Латиница - одним байтом,
        кириллица двумя байтами. Заменив один символ в строке - мы можем задеть другой символ. Всё пойдет крахом
    Пример:
        str1 := "asd"
        str2 := "zxc"
        res := str1 + str2 <- вот здесь мы создаем новую строку, выделяем под неё память и т.п.
    Поэтому есть strings.Builder{} - опять же его использование не всегда оправдано. Например на 2-3 значениях работает медленней
    Билдер накапливает в своём буфере значения, для преобразования их в новую строку позднее. Создается с нулевым буфером - и увеличивается
    по мере необходимости (а аллокация памяти - дорогая операция), поэтому можно задать буфер заранее builder{}.Grow()

    Отдельно: слайсы строк - это тоже строка, но надо помнить, что в строке символы могут быть различной длины. Если мы возьмем слайс
    строки по длине, не кратной размеру символа - будет невалидный символ. Для слайсов строки - мы должны использовать пакет utf8string

Байты. Руны. Кодировка.
Пакет strings, unicode/utf8.
Форматирование строк. Преобразование типов данных. Пакеты fmt, strconv.
