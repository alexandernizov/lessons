Структуры. Встраивание структур. Создание структур. Функциональные опции. Выравнивание структур.
    Структуры, создание и инициализация:
        Тип данных, определяемый разработчиком и служащий для представления каких-либо объектов.
        При создании, будет содержать в себе все zero value
        Так же как и все имеют указатели:
            *tom := &person{}
            *tom2 := new(person)
        К полям структуры можно обращаться по указателю или по значению
    Встреивание структур:
        Поля структуры могут содержать другие структуры
        Можно указать структуру в другой структуре без указания наименования переменной (как анонимные поля)
        Нельзя в структуре указывать саму себя, но можно указать ссылку (для хранения стека, например)
            type Node struct {
                value string
                next *Node
            }
        Две структуры с одинаковым наименованием в структуру можно вставить, но тогда надо указывать наименование, например:
            type contact struct {

            }
            type person struct {
                c1 contact
                c2 contact
            }

        У родительских структур доступно обращение к полям и методам дочерних структур. Причем, если поля\методы называются
        одинаково - то можно вызвать их в любом случае, но будет ambigous selector.
        Если у родительского А, есть дочерний Б, в котором дочерний Ц, у А, Б и Ц есть три метода с одинаковым названием, то
        при вызове А.Метод() - будет вызван первый метод по вложенности (А)

    Функциональные опции: https://habr.com/ru/articles/575316/
        Что-то вроде реализации инициализации обьекта через конструктор с ограничением на ввод данных.
        И тут же бенчи: https://habr.com/ru/articles/344352/

    Выравнивание структур: https://nuancesprog.ru/p/11674/
        Инструменты для анализа: aligncheck, maligned
    
    Пустая структура:
		1. Передача в канал какого-то события, когда нам не важно само значение, а сам факт этого события
		2. Использование в map - когда нам нужны ключи, но не нужны значения
		3. Можно сделать type alias для пустых структур. Тем самым получаем именованное событие, которое не имеет никакого значения. Используется для того, чтобы передавать факт наличия. Пример: использование в контексте, когда мы хотим сохранить какое-то значение в контексте, мы сначала должны описать имя для этого значения, которое мы потом достанем
		4. Добавить пустую структуру в свою структуру, не задавая этому полю какое-либо имя. Нужно, чтобы предотвратить копирование структур


Интерфейсы. Использование интерфейсов в Go.
    В GO используется утиная типизация, то есть нет никакого определяющего слово ИНТЕРФЕЙС для структуры. Если структура содержит
    все методы, которые указаны в интерфейсе (название + сигнатура), значит она соответствует интерфейсу. Причем порядок параметров
    должен совпадать. Пример:
        type I interface {
            printsome(a, b int)
        }
        type C struct {}
        func (c *C) printsome (b, a int){}
    C не будет соответствовать интерфейсу I

Модель памяти в Go. Стек и Куча. Escape Analysis. Memory Allocator. Stack Managment.
    https://habr.com/ru/articles/496846/
    https://habr.com/ru/articles/497994/
    https://habr.com/ru/articles/511176/

Операционная система. Процессы и потоки ОС. Планировщик ОС. Работа с памятью ОС.
    Процессы и потоки ОС: Э. Таненнбаум. Современные операционные системы. Главы 2 и 3