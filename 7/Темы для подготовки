- Порождающие Паттерны
    - Generator
    - Fan in (multiplexor)
    - Fan in extended
    - Fan out
    - Pipeline
- Паттерны многопоточной обработки данных. Worker Pool. Pipeline.
    - worker pool
        Создается N воркеров, каждый воркер - это отдельная горутина. Прекращают работу, когда больше нечего обрабатывать. Например: всего надо обработать 10 сообщений, у нас 3 воркера
        все три воркера будут работать, подхватывая по одному значению, пока все 10 сообщений не отработаны
    - queue
        Создается очередь из N элементов, на каждый элемент в очереди создается отдельная горутина для выполнения. Например: всего нужно обработать 10 сообщений, поочередно создали 10 горутин
        для их выполнения. В каждой горутине мы захватили "флаг" работы, чтобы одновременно могло работать не более N горутин (при создании взяли "флаг", при завершении положили флаг назад)
    - parallel for loop
        Если есть цикл, в котором все вычисления не зависят друг от друга - их можно выполнить в отдельных горутинах.
    - bounded parallel for loop
        То же самое, что и parallel for loop, но с ограничением одновременно выполняющихся горутин

- Обработка ошибок и паник в Go. Пакеты для работы с ошибками.
    src/errors
    Error в Go - это интерфейс, в котором есть один метод Error() string
    Работает по принципу матрешки, чтобы "обернуть" ошибку - мы используем глагол fmt.Errorf("%w", newError)

    Is - ищет, есть ли такая же ошибка в "стеке" ошибок
    As - ищет есть ли ошибка с таким же типом, который передаем в указателе, и записывает в указатель её значение
    Unwrap - распаковывает ошибку и позволяет увидеть её полностью
    Join - объединяет ошибки через \n


    Паники - это ошибки, которые не ожидались при выполнении функции:
    - индексация массива за пределами его емкости
    - утверждения типов
    - вызов методов с указателем nil
    - некорректное использование мьютексов
    - попытки работы с закрытыми каналами

    Состоят из сообщения, указывающего причину паники, и трассировки стека. Могут быть так же вызваны самостоятельно с помощью функци panic("asd"), но рекоммендуется обрабатывать ошибки именно
    через error. Панику можно использовать при инициализации приложения, когда дальнейшая работа бессмысленна, например: мы не смогли инициализирвоать конфиг приложения, можно сделать панику.


- Конструкция defer и её использование.
    defer - отложенная функция, которая выполняется после закрытия функции, в которой она вызывается. Используется, чтобы освободить ресурсы или обработать панику
    работают по принципу LIFO - от последней к первой

- Логгирование и типы логгирования.
    https://habr.com/ru/articles/795445/
    https://www.youtube.com/watch?v=p9XiOOU52Qw