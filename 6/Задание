- Реализовать паттерн "Worker Pool"
Необходимо написать функцию для параллельного выполнения заданий в n параллельных горутинах:
    - количество создаваемых горутин не должно зависеть от числа заданий, т.е. функция должна запускать n горутин для конкурентной
    обработки заданий и, возможно, еще несколько вспомогательных горутин, функция должна останавливать свою работу, если произошло
    m ошибок;
    - после завершения работы функции (успешного или из-за превышения m) не должно оставаться работающих горутин;
    - Нужно учесть, что задания могут выполняться разное время, а длина списка задач len(tasks) может быть больше или меньше n;

Значение m <= 0 трактуется на усмотрение программиста:
    или это знак игнорировать ошибки в принципе;
    или считать это как "максимум 0 ошибок", значит функция всегда будет возвращать ErrErrorsLimitExceeded;
    
    на эту логику следует написать юнит-тест.

Граничные случаи:
    если задачи работают без ошибок, то выполнятся len(tasks) задач, т.е. все задачи;
    если в первых выполненных m задачах (или вообще всех) происходят ошибки, то всего выполнится не более n+m задач.

(*) Дополнительное задание: написать тест на concurrency без time.Sleep

import (
	"errors"
)

var ErrErrorsLimitExceeded = errors.New("errors limit exceeded")

type Task func() error

// Run starts tasks in n goroutines and stops its work when receiving m errors from tasks.
func Run(tasks []Task, n, m int) error {
	// Place your code here.
	return nil
}
