Материалы для подготовки
https://go.dev/wiki/LearnConcurrency
https://habr.com/ru/companies/avito/articles/753244/
https://habr.com/ru/articles/478168/
https://habr.com/ru/articles/489862/
https://habr.com/ru/companies/otus/articles/589851/
https://go101.org/article/channel.html
https://go.dev/blog/context-and-structs
https://www.youtube.com/watch?v=jF18ggLhG8M
https://www.youtube.com/watch?v=z0iJ-S_wYwk
https://www.youtube.com/watch?v=GqddMRDRbOM

Go Runtime
Go Scheduler
    https://habr.com/ru/articles/743266/
Garbage Collector
    https://habr.com/ru/companies/avito/articles/753244/
Различные алгоритмы сборки мусора
    - Ручное управление памятью
        Используется, когда не подходит использование сборщика мусора: разработка драйверов\кодеков\архиваторов...
        Может привести к большому количеству ошибок, так как ответственность по работе с памятью идет на программисте
    - Копирующий сборщик мусора Copiyng Garbage Collection
        Есть две кучи, в работе находится одна из них. Когда в первой куче кончается место - обход всех данных и копирование
        действующих во вторую кучу, данные уплотняются, а ссылки модифицируются. При завершении обхода кучи меняются местами
    - Трассирующий сборщик мусора - базовый алгоритм Mark and Sweep, используемый в GO
        Раз в какое-то время, например раз в 1000 выделений памяти запускается трассировщик. Он обходит все ссылки и помечает память,
        которая используется. Которая не используется - становится свободной.
        Из недостаткой - stop the world. Нам нужно остановить программу, чтобы проверить все ссылки, иначе во время выполнения остановить
        могут измениться
    - Счетчик ссылок (Reference counting)
        Помимо данных рядом хранится счетчик ссылок на эти данные. При создании счетчик увеличивается на 1, при уничтожении - уменьшается
        Из плюсов - работает быстро, упрощается поддержка кода
        Из минусов, при наличии циклических ссылок будет утечка памяти
    - Сборщик мусора по поколениям (Generational garbage collector)
    В большинстве языков используется модифицированный алгоритм управления GC. В GO это Сoncurrent garbage collection
    https://habr.com/ru/companies/avito/articles/753244/

Каналы
    https://habr.com/ru/companies/oleg-bunin/articles/522742/
    rc/runtime/chan.go
Внутреннее устройство каналов
    Структура с буфером, двумя очередями и локом внутри
Аксиомы каналов.
    - Закрытый канал - не блокируется, мы можем считать из него данные, которые остались в буфере
        ch := make(chan bool, 2)
	    ch <- true
	    ch <- true
	    close(ch)

        for i := 0; i < cap(ch)+1; i++ {
            v, ok := <-ch
            fmt.Println(v, ok)
        }

        true true
        true true - два значения есть в буфере, поэтому true true
        false false - а третьего нет, и для bool по-умолчанию false, поэтому false false
    
    - Канал с нулевым значением всегда блокируется

    - Отправка в нулевой канал блокируется навсегда

    - Получение из нулевого канала блокируется навсегда

    - Отправка в закрытый канал приводит к панике

    - Приём из закрытого канала немедленно возвращает нулевое значение

Горутины
Внутреннее устройство горутин
Различные модели многозадачности
    Простое переключение
        на вторую задачу переключается после завршения первой
    Совместная, или кооперативная многозадачность
        задачи сами отдают процессорное время
    Вытесняющая многозадачность
        задача 1 может быть переключена на задачу 2 операционной системой, вне зависимости от исполнения
    кода задачи 1 (между двумя инструкциями), распределение времени осуществляется планировщиком
Коммуникация и синхронизация горутин

Примитивы синхронизации
Пакет sync
Мультиплексирование (select)

Контексты
Работа с контекстами